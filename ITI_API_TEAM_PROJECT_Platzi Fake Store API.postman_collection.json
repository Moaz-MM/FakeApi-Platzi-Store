{
	"info": {
		"_postman_id": "af13ccc2-69eb-4d3f-b378-549375a27d06",
		"name": "ITI_API_TEAM_PROJECT_Platzi Fake Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37529548"
	},
	"item": [
		{
			"name": "Rest API",
			"item": [
				{
					"name": "products",
					"item": [
						{
							"name": "Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let all_products_ids = [];\r",
											"pm.response.json().forEach(e => {\r",
											"    all_products_ids.push(e.id);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"all_products_ids\", all_products_ids);\r",
											"\r",
											"pm.test(\"Products_Get_All Products found successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Products_Get_All Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"let content_type = pm.response.headers.find(e => e.key == \"Content-Type\").value\r",
											"\r",
											"pm.test(\"Products_Get_All Content type is json\", function () {\r",
											"    pm.expect(content_type).to.contain(\"json\")\r",
											"})\r",
											"\r",
											"pm.test(\"Products_Get_All Response time is less than 1 second\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/products/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"let get_one_product_id = pm.environment.get(\"get_one_product_id\");\r",
											"\r",
											"pm.test(\"Products_Get_One Product is found successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Products_Get_One Response time is less than 1 second\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Products_Get_All Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"let content_type = pm.response.headers.find(e => e.key == \"Content-Type\").value\r",
											"\r",
											"pm.test(\"Products_Get_All Content type is json\", function () {\r",
											"    pm.expect(content_type).to.contain(\"json\")\r",
											"})\r",
											"\r",
											"pm.test(\"Products_Get_One response product ID correct\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(get_one_product_id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let all_products_ids = pm.environment.get(\"all_products_ids\");\r",
											"let random_id_index = Math.floor(Math.random()*(all_products_ids.length));\r",
											"pm.environment.set(\"get_one_product_id\", all_products_ids[random_id_index]);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/products/{{get_one_product_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										"{{get_one_product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let created_product_id = pm.response.json().id;\r",
											"pm.environment.set(\"created_product_id\", created_product_id);\r",
											"\r",
											"let expected_status_code = pm.iterationData.get(\"expected_status_code\") ?? 201;\r",
											"\r",
											"pm.test(\"Products_Create Product is created successfully\", function () {\r",
											"    pm.response.to.have.status(expected_status_code);\r",
											"});\r",
											"\r",
											"pm.test(\"Products_Create Response time is less than 1 second\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"title\": \"nerjjker\",\r\n//     \"price\": 40,\r\n//     \"description\": \"An awesome Rick and Morty T-shirt gfjhdyhkjd\",\r\n//     \"categoryId\": 1,\r\n//     \"images\": [\r\n//         \"https://placeimg.com/640/480/any\"\r\n//     ]\r\n// }\r\n\r\n{\r\n    \"title\": \"{{create_product_title}}\",\r\n    \"price\": {{create_product_price}},\r\n    \"description\": \"{{create_product_description}}\",\r\n    \"categoryId\": {{create_product_category_id}},\r\n    \"images\": [\r\n        \"{{create_product_images}}\"\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{version}}/products/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let created_product_id = pm.environment.get(\"created_product_id\");\r",
											"pm.environment.set(\"update_product_id\", created_product_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update_Product Product is updated successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Update_Product Response time is less than 1 second\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"price\": 256,\r\n    \"images\": [\r\n        \"https://placeimg.com/640/480/any\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{version}}/products/{{update_product_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										"{{update_product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let created_product_id = pm.environment.get(\"created_product_id\");\r",
											"pm.environment.set(\"delete_product_id\", created_product_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Delete_Product Product is deleted successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete_Product Response time is less than 1 second\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/products/{{delete_product_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										"{{delete_product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product pagination",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"product_pagination_offset\", 0);\r",
											"\r",
											"pm.environment.set(\"product_pagination_limit\", 10);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product_Pagination Response time is less than 1 second\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"let product_pagination_limit = pm.environment.get(\"product_pagination_limit\");\r",
											"pm.test(\"Product_Pagination Response products count is equal to limit\", function () {\r",
											"    pm.expect(pm.response.json().length).to.eql(product_pagination_limit);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/products/?offset={{product_pagination_offset}}&limit={{product_pagination_limit}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										""
									],
									"query": [
										{
											"key": "offset",
											"value": "{{product_pagination_offset}}"
										},
										{
											"key": "limit",
											"value": "{{product_pagination_limit}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Filter Products",
					"item": [
						{
							"name": "Get Filter by title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"let filter_productd_title = pm.environment.get(\"filter_productd_title\");\r",
											"pm.test(\"filter by title\", function () {\r",
											"    jsonData.forEach(function(item) {\r",
											"            pm.expect(item.title).to.include(filter_productd_title);\r",
											"        });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"filter_productd_title\", \"Silver\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/products/?title={{filter_productd_title}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										""
									],
									"query": [
										{
											"key": "title",
											"value": "{{filter_productd_title}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Filter by price",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"filter_productd_price\", 40);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"let filter_productd_price = pm.environment.get(\"filter_productd_price\");\r",
											"\r",
											"pm.test(\"filter by price\", function () {\r",
											"    jsonData.forEach(function(item) {\r",
											"        pm.expect(item.price).to.eql(filter_productd_price);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/products/?price={{filter_productd_price}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										""
									],
									"query": [
										{
											"key": "price",
											"value": "{{filter_productd_price}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Filter by price range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"filter_productd_min_price\", 10);\r",
											"\r",
											"pm.environment.set(\"filter_productd_max_price\", 50);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"let filter_productd_min_price = pm.environment.get(\"filter_productd_min_price\");\r",
											"let filter_productd_max_price = pm.environment.get(\"filter_productd_max_price\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"filter by  price range\", function () {\r",
											"    jsonData.forEach(function(item) {\r",
											"        pm.expect(item.price).to.greaterThanOrEqual(filter_productd_min_price);\r",
											"        pm.expect(item.price).to.lessThanOrEqual(filter_productd_max_price)\r",
											"\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/products/?price_min={{filter_productd_min_price}}&price_max={{filter_productd_max_price}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										""
									],
									"query": [
										{
											"key": "price_min",
											"value": "{{filter_productd_min_price}}"
										},
										{
											"key": "price_max",
											"value": "{{filter_productd_max_price}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Filter by category id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"filter_productd_category\", 1);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"let filter_productd_category = pm.environment.get(\"filter_productd_category\");\r",
											"\r",
											"\r",
											"pm.test(\"filter by category\", function () {\r",
											"    jsonData.forEach(function(item) {\r",
											"            pm.expect(item.category.id).to.equal(filter_productd_category);\r",
											"        });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{version}}/products/?categoryId={{filter_productd_category}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										""
									],
									"query": [
										{
											"key": "categoryId",
											"value": "{{filter_productd_category}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Join filters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"filter_productd_title\", \"Silver\");\r",
											"\r",
											"pm.environment.set(\"filter_productd_min_price\", 10);\r",
											"\r",
											"pm.environment.set(\"filter_productd_max_price\", 60);\r",
											"\r",
											"pm.environment.set(\"filter_productd_category\", 1);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//////////////////////////////////////////////////////////////////////\r",
											"//title test\r",
											"let filter_productd_title = pm.environment.get(\"filter_productd_title\");\r",
											"pm.test(\"filter by title\", function () {\r",
											"    jsonData.forEach(function(item) {\r",
											"            pm.expect(item.title).to.include(filter_productd_title);\r",
											"        });\r",
											"});\r",
											"///////////////////////////////////////////////////////////////////////\r",
											"//price range test \r",
											"let filter_productd_min_price = pm.environment.get(\"filter_productd_min_price\");\r",
											"let filter_productd_max_price = pm.environment.get(\"filter_productd_max_price\");\r",
											"\r",
											"pm.test(\"filter by  price range\", function () {\r",
											"    jsonData.forEach(function(item) {\r",
											"        pm.expect(item.price).to.greaterThanOrEqual(filter_productd_min_price);\r",
											"        pm.expect(item.price).to.lessThanOrEqual(filter_productd_max_price)\r",
											"\r",
											"    });\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////\r",
											"//cat id filter test\r",
											"let filter_productd_category = pm.environment.get(\"filter_productd_category\");\r",
											"\r",
											"\r",
											"pm.test(\"filter by category\", function () {\r",
											"    jsonData.forEach(function(item) {\r",
											"            pm.expect(item.category.id).to.equal(filter_productd_category);\r",
											"        });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/products/?title={{filter_productd_title}}&price_min={{filter_productd_min_price}}&price_max={{filter_productd_max_price}}&categoryId={{filter_productd_category}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"products",
										""
									],
									"query": [
										{
											"key": "title",
											"value": "{{filter_productd_title}}"
										},
										{
											"key": "price_min",
											"value": "{{filter_productd_min_price}}"
										},
										{
											"key": "price_max",
											"value": "{{filter_productd_max_price}}"
										},
										{
											"key": "categoryId",
											"value": "{{filter_productd_category}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "categories",
					"item": [
						{
							"name": "Get all categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/categories/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a single category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/categories/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"categories",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Books\",\r\n  \"image\": \"https://api.lorem.space/image/book?w=150&h=220\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{version}}/categories/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"nuevo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{version}}/categories/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"categories",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a category",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/categories/61",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"categories",
										"61"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/users/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/users/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Nicolas\",\r\n  \"email\": \"nico@gmail.com\",\r\n  \"password\": \"1234\",\r\n  \"avatar\": \"https://picsum.photos/800\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{version}}/users/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"john@mail.com\",\r\n  \"name\": \"Change name\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{version}}/users/61",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"users",
										"61"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check the email is available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"email\": \"maria@mail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{version}}/users/is-available",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"users",
										"is-available"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "auth",
					"item": [
						{
							"name": "Create login auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"token\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"email\": \"{{email}}\",\r\n\t\"password\": \"{{password}}\"\r\n}\r\n// \"email\": \"john@mail.com\",\r\n// \t\"password\": \"changeme\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{version}}/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/auth/profile",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"auth",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "files",
					"item": [
						{
							"name": "Create file upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/pc/Downloads/bmd-groupe-logo_page-0001.jpg"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/{{version}}/files/upload",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"files",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{version}}/files/e74f.jpg",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{version}}",
										"files",
										"e74f.jpg"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}